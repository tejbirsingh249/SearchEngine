


javascript function closures










 
 
 
 
 
 















  
    
  



  tutorials 
  references 
  exercises 
  videos
  pro new

  menu 

  
    
      
      log in
  

  
    
    paid courses
    website new
    



  




  
    
      
      
      html
      css
      javascript
      sql
      python
      php
      bootstrap
      how to
      w3.css
      java
      jquery
      c++
      c#
      r
      react
      kotlin
      ?
      ?

      ?


      
      
    
    

 dark mode

 dark code



 
 ×
 
  
   tutorials
  
  
   html and css
   learn html
   learn css
   learn rwd
   learn bootstrap
   learn w3.css
   learn colors
   learn icons
   learn graphics
   learn svg
   learn canvas
   learn how to
   learn sass   
   
   data analytics
   learn ai
   learn machine learning
   learn data science 
   learn numpy       
   learn pandas    
   learn scipy    
   learn matplotlib    
   learn statistics
   learn excel

   xml tutorials
   learn xml
   learn xml ajax
   learn xml dom
   learn xml dtd
   learn xml schema
   learn xslt
   learn xpath
   learn xquery
  
  
  
   javascript
   learn javascript
   learn jquery
   learn react
   learn angularjs
   learn json
   learn ajax
   learn appml
   learn w3.js

   programming
   learn python
   learn java
   learn c
   learn c++
   learn c#
   learn r
   learn kotlin
   learn go
   learn django
   
 
   server side
   learn sql
   learn mysql
   learn php
   learn asp
   learn node.js
   learn raspberry pi
   learn git
   learn aws cloud

   web building
   create a website new
   where to start
   web templates
   web statistics
   web certificates
   web development
   code editor
   test your typing speed
   play a code game
   cyber security
   accessibility
  
  
   data analytics
   learn ai
   learn machine learning
   learn data science 
   learn numpy    
   learn pandas    
   learn scipy    
   learn matplotlib    
   learn statistics
   learn excel
   learn google sheets

   xml tutorials
   learn xml
   learn xml ajax
   learn xml dom
   learn xml dtd
   learn xml schema
   learn xslt
   learn xpath
   learn xquery
  
 
 
 



 
 ×
 
 
   references
  
  
   html
   html tag reference
   html browser support   
   html event reference
   html color reference
   html attribute reference
   html canvas reference
   html svg reference
   google maps reference
   css
   css reference
   css browser support
   css selector reference
   bootstrap 3 reference
   bootstrap 4 reference
   w3.css reference
   icon reference
   sass reference
  
  
   javascript
   javascript reference
   html dom reference
   jquery reference
   angularjs reference
   appml reference
   w3.js reference

   programming
   python reference
   java reference
  
  
   server side
   sql reference
   mysql reference
   php reference
   asp reference
   xml
   xml dom reference
   xml http reference
   xslt reference
   xml schema reference
  
  
   character sets
   html character sets
   html ascii
   html ansi
   html windows-1252
   html iso-8859-1
   html symbols
   html utf-8
  
 
 
 



 
 ×
 
 
   exercises and quizzes
  
  
   exercises
   html exercises
   css exercises
   javascript exercises
   sql exercises
   mysql exercises
   php exercises
   python exercises
   numpy exercises
   pandas exercises
   scipy exercises
   jquery exercises
   java exercises
   c++ exercises
   c# exercises
   r exercises
   kotlin exercises
   go exercises
   bootstrap exercises
   bootstrap 4 exercises
   bootstrap 5 exercises
   git exercises
  
  
   quizzes
   html quiz
   css quiz
   javascript quiz
   sql quiz
   mysql quiz
   php quiz
   python quiz
   numpy quiz
   pandas quiz
   scipy quiz
   jquery quiz
   java quiz
   c++ quiz
   c# quiz
   r quiz
   xml quiz
   cyber security quiz
   bootstrap quiz
   bootstrap 4 quiz
   bootstrap 5 quiz
   accessibility quiz
  
  
   courses
  
   html course
   css course
   javascript course
   front end course
   sql course
   php course
   python course
   numpy course
   pandas course
   data analytics course
   jquery course
   java course
   c++ course
   c# course
   r course
   xml course
   cyber security course
   accessibility course
  
  
   certificates
  
   html certificate
   css certificate
   javascript certificate
   front end certificate
   sql certificate
   php certificate
   python certificate
   data science certificate
   bootstrap 3 certificate
   bootstrap 4 certificate
   jquery certificate
   java certificate
   c++ certificate
   react certificate
   xml certificate
  
 
 
 



  



  ×
  
    tutorials 
    
    references 
    
    exercises 
    
    paid courses
    spaces
    videos
    shop
    pro
  






  
    

js tutorial
js home
js introduction
js where to
js output
js statements
js syntax
js comments
js variables
js let
js const
js operators
js arithmetic
js assignment
js data types
js functions
js objects
js events
js strings
js string methods
js string search
js string templates
js numbers
js number methods
js arrays
js array methods
js array sort
js array iteration
js array const
js dates
js date formats
js date get methods
js date set methods
js math
js random
js booleans
js comparisons
js conditions
js switch
js loop for
js loop for in
js loop for of
js loop while
js break
js iterables
js sets
js maps
js typeof
js type conversion
js bitwise
js regexp
js errors
js scope
js hoisting
js strict mode
js this keyword
js arrow function
js classes
js modules
js json
js debugging
js style guide
js best practices
js mistakes
js performance
js reserved words

js versions
js versions
js 2009 (es5)
js 2015 (es6)
js 2016
js 2017
js 2018
js ie / edge
js history

js objects
object definitions
object properties
object methods
object display
object accessors
object constructors
object prototypes
object iterables
object sets
object maps
object reference

js functions
function definitions
function parameters
function invocation
function call
function apply
function bind
function closures

js classes
class intro
class inheritance
class static

js async
js callbacks
js asynchronous
js promises
js async/await

js html dom
dom intro
dom methods
dom document
dom elements
dom html
dom forms
dom css
dom animations
dom events
dom event listener
dom navigation
dom nodes
dom collections
dom node lists

js browser bom
js window
js screen
js location
js history
js navigator
js popup alert
js timing
js cookies

js web apis
web api intro
web forms api
web history api
web storage api
web worker api
web fetch api
web geolocation api

js ajax
ajax intro
ajax xmlhttp
ajax request
ajax response
ajax xml file
ajax php
ajax asp
ajax database
ajax applications
ajax examples

js json
json intro
json syntax
json vs xml
json data types
json parse
json stringify
json objects
json arrays
json server
json php
json html
json jsonp

js vs jquery
jquery selectors
jquery html
jquery css
jquery dom

js graphics
js graphics
js canvas
js plotly
js chart.js
js google chart
js d3.js

js examples
js examples
js html dom
js html input
js html objects
js html events
js browser
js editor
js exercises
js quiz
js certificate

js references
javascript objects
html dom objects

      
    
  


  
    
      
        

        
        
        

      
javascript closures

? previous
next ?



javascript variables can belong to the local or
global scope.
global variables can be made local (private) with closures.


global variables
a function can access all variables defined inside the function, like this:

example

function myfunction() {
    let a = 4;
    return a * a;
}

try it yourself »


but a function can also access variables defined outside the function, like this:

example

let a = 4;function myfunction() {
    return a * a;
}

try it yourself »


in the last example, a is a global 
variable. 
in a web page, global variables belong to the window object.
global variables can be used 
(and changed) by all scripts in the page (and in the window). 
in the first example, a is a local 
variable.
a local variable can only be used inside the function where it is defined. it 
is hidden from other functions and other scripting code.
global 
and local variables with the same name are  
different variables. modifying one, does not modify the other. 


variables created without a declaration keyword (var,
let, or const) 
are always 
global, even if they are created inside a function.


example

function myfunction() {
  a = 4;
}

try it yourself »







  
  


variable lifetime
global variables live until the page is discarded, like when you navigate 
to another page or close the window.
local 
variables have short lives. they are created when the function is 
invoked, and deleted when the function is finished.


a counter dilemma
suppose you want to use a variable for counting something, and you want this 
counter to be available to all functions.
you could use a global variable, and a function to increase the counter:

example

  // initiate counterlet counter = 0;// function to increment 
  counterfunction add() {
  counter += 1;
}// call add() 3 times
add();
add();
add();// the counter should now be 3
  try it yourself »


there is a problem with the solution above: any code on the page can change the counter, without 
calling add().
the counter should be local to the add() function, to prevent other code from changing 
it:

example

  // initiate counterlet counter = 0;// function to increment 
  counterfunction add() {  let counter = 0;   
  counter += 1;}// 
  call add() 3 timesadd();add();add();//the counter should 
  now be 3. but it is 0
try it yourself »



it did not work because we display the global counter instead of the local 
counter.
we can remove the global counter and access the local counter by letting the 
function return it:

example

  // function to increment 
  counterfunction add() {  let counter = 0;   
  counter += 1;  return counter;}// 
  call add() 3 timesadd();add();add();//the counter should 
  now be 3. but it is 1.
try it yourself »



it did not work because we reset the local counter every time we call the 
function.
 a javascript inner function can solve this.


javascript nested functions
all functions have access to the global scope.   
in fact, in javascript, all functions have access to the scope "above" them.
javascript supports nested functions. nested functions have access to the 
scope "above" them. 


in this example, the inner function plus() has access 
to the counter variable in the parent function:

 example

 function add() {
    let counter = 0;
    function plus() {counter += 1;}  plus();   
   return counter; }
try it yourself »



this could have solved the counter dilemma, if we could reach the plus() 
function from the outside.
we also need to find a way to execute counter = 0 only once.
we need a closure.


javascript closures
remember self-invoking functions? what does this function do?

example

const add = (function () {  let counter = 0;  return function () {counter += 1; return counter}})();add();
add();
add();
// the counter is now 3

  try it yourself »



example explained
the variable add is assigned to the return value of a self-invoking 
function.
the self-invoking function only runs once. it sets the counter to zero (0), 
and returns a function expression.
this way add becomes a function. the "wonderful" part is that it can access 
the counter in the parent scope. 
this is called a javascript closure. it makes it possible 
for a function to have "private" variables.
the counter is protected by the scope of the anonymous function, 
and can only be changed using the add function.


a closure is a function having access to the parent scope, even after the parent function has closed.



? previous
next ?









  
  
    
  
  

  



  
    new
  
  we just launchedw3schools videos
  
  explore now



color picker







  
    
    
    
        
  







get certifiedby completinga course today!


w3schools certified  .  2022



get started











  code game
  
  play game







  
    
      
      
        
      
    
  











  
    
    
    
    
    
    
    
  





report error



forum


about


shop





×

report error

if you want to report an error, or if you want to make a suggestion, do not hesitate to send us an e-mail:
help@w3schools.com






×     
thank you for helping us!
your message has been sent to w3schools.





top tutorials
html tutorial
css tutorial
javascript tutorial
how to tutorial
sql tutorial
python tutorial
w3.css tutorial
bootstrap tutorial
php tutorial
java tutorial
c++ tutorial
jquery tutorial




top references
html reference
css reference
javascript reference
sql reference
python reference
w3.css reference
bootstrap reference
php reference
html colors
java reference
angular reference
jquery reference




top examples
html examples
css examples
javascript examples
how to examples
sql examples
python examples
w3.css examples
bootstrap examples
php examples
java examples
xml examples
jquery examples






web courses
html course
css course
javascript course
front end course
sql course
python course
php course
jquery course
java course
c++ course
c# course
xml course

get certified »



        
        



w3schools is optimized for learning and training. examples might be simplified to improve reading and learning.
tutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content.
while using w3schools, you agree to have read and accepted our terms of use, 
cookie and privacy policy.
copyright 1999-2022 by refsnes data. all rights reserved.
w3schools is powered by w3.css.



    












